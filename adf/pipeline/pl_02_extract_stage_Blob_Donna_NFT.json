{
	"name": "pl_02_extract_stage_Blob_Donna_NFT",
	"properties": {
		"description": "Donna NFT dataset",
		"activities": [
			{
				"name": "Get Ping Token",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Get ping-client-secret",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get ping-client-id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.01:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@variables('var_url_auth_ping')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "PENBISelfHostedIR",
						"type": "IntegrationRuntimeReference"
					},
					"method": "POST",
					"headers": {
						"Content-Type": "application/x-www-form-urlencoded"
					},
					"body": {
						"value": "grant_type=client_credentials&client_id=@{activity('Get ping-client-id').output.value}&client_secret=@{activity('Get ping-client-secret').output.value}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Save NFT Page Count",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get NFT Page Count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "var_nft_page_count",
					"value": {
						"value": "@string(activity('Get NFT Page Count').output.result.data.pages)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get ping-client-id",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.01:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat(pipeline().parameters.KeyVaultDNSName,'secrets/donna-ping-client-id/?api-version=7.0')",
						"type": "Expression"
					},
					"method": "GET",
					"body": {
						"simple": "body"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get ping-client-secret",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.01:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat(pipeline().parameters.KeyVaultDNSName,'secrets/donna-ping-client-secret/?api-version=7.0')",
						"type": "Expression"
					},
					"method": "GET",
					"body": {
						"simple": "body"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Get NFT Page Count",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Get Ping Token",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set var_modifiedDate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.01:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat(\n    variables('var_url_donna_gateway')\n    , '/nft/v1/staging-page-info'\n)",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "PENBISelfHostedIR",
						"type": "IntegrationRuntimeReference"
					},
					"method": "POST",
					"headers": {
						"correlationid": {
							"value": "@concat(\n    string(pipeline().parameters.par_batch_id)\n    ,'-00-call-for-pagecount'\n)",
							"type": "Expression"
						},
						"username": "penbi",
						"Authorization": {
							"value": "@concat(string(activity('Get Ping Token').output.token_type),' ',string(activity('Get Ping Token').output.access_token))",
							"type": "Expression"
						},
						"Content-Type": "application/json"
					},
					"body": {
						"value": "{\"modifiedDate\": \"@{if(or(not(pipeline().parameters.par_blob_folder_exists),empty(variables('var_modifiedDate'))), variables('var_dataset_start_time'),variables('var_modifiedDate'))}\",\n    \"pageSize\": @{string(pipeline().parameters.par_pageSize)}\n}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEach API Page",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Save NFT Page Count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@range(1, int(variables('var_nft_page_count')))",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Copy API NFT Data to Blob",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"additionalColumns": [
										{
											"name": "source_system",
											"value": {
												"value": "@pipeline().parameters.par_SourceSystem",
												"type": "Expression"
											}
										},
										{
											"name": "batch_id",
											"value": {
												"value": "@pipeline().parameters.par_batch_id",
												"type": "Expression"
											}
										}
									],
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "POST",
									"requestBody": {
										"value": "{\"page\": @{string(item())},\"modifiedDate\": \"@{if(or(not(pipeline().parameters.par_blob_folder_exists),empty(variables('var_modifiedDate'))), variables('var_dataset_start_time'),variables('var_modifiedDate'))}\",\"pageSize\": @{string(pipeline().parameters.par_pageSize)}\n}",
										"type": "Expression"
									},
									"additionalHeaders": {
										"correlationid": {
											"value": "@concat(\n    string(pipeline().parameters.par_batch_id)\n    ,'-'\n    ,string(item())\n)",
											"type": "Expression"
										},
										"username": "penbi",
										"Content-Type": "application/json"
									},
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings",
										"maxRowsPerFile": 1000000,
										"fileNamePrefix": {
											"value": "@concat(\ntoLower(pipeline().parameters.par_datafeed_stage[0].SourceEntity)\n,'-'\n,pipeline().parameters.par_batch_ts\n,'-', string(item())\n)",
											"type": "Expression"
										}
									}
								},
								"enableStaging": false,
								"enableSkipIncompatibleRow": true,
								"logSettings": {
									"enableCopyActivityLog": true,
									"copyActivityLogSettings": {
										"logLevel": "Warning",
										"enableReliableLogging": false
									},
									"logLocationSettings": {
										"linkedServiceName": {
											"referenceName": "ls_adls_penbi",
											"type": "LinkedServiceReference"
										},
										"path": "logs"
									}
								},
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"path": "['request_no']"
											},
											"sink": {
												"name": "request_no",
												"type": "Int64"
											}
										},
										{
											"source": {
												"path": "['nftId']"
											},
											"sink": {
												"name": "nftId",
												"type": "Int64"
											}
										},
										{
											"source": {
												"path": "['groupNo']"
											},
											"sink": {
												"name": "groupNo",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['firstName']"
											},
											"sink": {
												"name": "firstName",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['lastName']"
											},
											"sink": {
												"name": "lastName",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['suffixSin']"
											},
											"sink": {
												"name": "suffixSin",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['dateOfBirth']"
											},
											"sink": {
												"name": "dateOfBirth",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['emailAddress']"
											},
											"sink": {
												"name": "emailAddress",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['addressLine1']"
											},
											"sink": {
												"name": "addressLine1",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['addressLine2']"
											},
											"sink": {
												"name": "addressLine2",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['aptSuitUnitNumber']"
											},
											"sink": {
												"name": "aptSuitUnitNumber",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['city']"
											},
											"sink": {
												"name": "city",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['province']"
											},
											"sink": {
												"name": "province",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['country']"
											},
											"sink": {
												"name": "country",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['postalCode']"
											},
											"sink": {
												"name": "postalCode",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['addressInvalidInd']"
											},
											"sink": {
												"name": "addressInvalidInd",
												"type": "Boolean"
											}
										},
										{
											"source": {
												"path": "['addressModifiedDate']"
											},
											"sink": {
												"name": "addressModifiedDate",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['returnedMailRequestDate']"
											},
											"sink": {
												"name": "returnedMailRequestDate",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['canadaPostValidInd']"
											},
											"sink": {
												"name": "canadaPostValidInd",
												"type": "Boolean"
											}
										},
										{
											"source": {
												"path": "['hireDate']"
											},
											"sink": {
												"name": "hireDate",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['createDate']"
											},
											"sink": {
												"name": "createDate",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['homePhone']"
											},
											"sink": {
												"name": "homePhone",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['mobilePhone']"
											},
											"sink": {
												"name": "mobilePhone",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['languagePreference']"
											},
											"sink": {
												"name": "languagePreference",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['employeeId']"
											},
											"sink": {
												"name": "employeeId",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['employmentType']"
											},
											"sink": {
												"name": "employmentType",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['unionAffiliation']"
											},
											"sink": {
												"name": "unionAffiliation",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['salaryAmount']"
											},
											"sink": {
												"name": "salaryAmount",
												"type": "Double"
											}
										},
										{
											"source": {
												"path": "['salaryType']"
											},
											"sink": {
												"name": "salaryType",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['status']"
											},
											"sink": {
												"name": "status",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['workflowId']"
											},
											"sink": {
												"name": "workflowId",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['datasourceId']"
											},
											"sink": {
												"name": "datasourceId",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['modifiedBy']"
											},
											"sink": {
												"name": "modifiedBy",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "['modifiedTS']"
											},
											"sink": {
												"name": "modifiedTS",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "$['source_system']"
											},
											"sink": {
												"name": "source_system",
												"type": "String"
											}
										},
										{
											"source": {
												"path": "$['batch_id']"
											},
											"sink": {
												"name": "batch_id",
												"type": "String"
											}
										}
									],
									"collectionReference": "$['result']['data']"
								}
							},
							"inputs": [
								{
									"referenceName": "ds_api_donna_nft",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "ds_adls_parquet_target",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@pipeline().parameters.par_SourceSystem",
											"type": "Expression"
										},
										"folder": {
											"value": "@concat(pipeline().parameters.par_datafeed_stage[0].DestinationEntity\n,'/batch_ts='\n,pipeline().parameters.par_batch_ts\n)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Set rowsCopied",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Copy API NFT Data to Blob",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_rowsCopied",
								"value": {
									"value": "@string(\n    add(\n        int(variables('var_rowsCopied_Incremental'))\n        , activity('Copy API NFT Data to Blob').output.rowsCopied\n        )\n    )\n",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set rowsRead",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set rowsCopied",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set rowsSkipped",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_rowsRead",
								"value": {
									"value": "@string(\n    add(\n        int(variables('var_rowsRead_Incremental'))\n        , if(equals(activity('Copy API NFT Data to Blob').output.rowsSkipped,0)\n            , activity('Copy API NFT Data to Blob').output.rowsCopied\n            , sub(activity('Copy API NFT Data to Blob').output.rowsCopied, activity('Copy API NFT Data to Blob').output.rowsSkipped))\n        )\n    )\n",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set rowsSkipped",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Copy API NFT Data to Blob",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_rowsSkipped",
								"value": {
									"value": "@string(\n    add(\n        int(variables('var_rowsSkipped_Incremental'))\n        , activity('Copy API NFT Data to Blob').output.rowsSkipped\n        )\n    )",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set rowsRead Incremental",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set rowsRead",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_rowsRead_Incremental",
								"value": {
									"value": "@variables('var_rowsRead')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set rowsSkipped Incremental",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set rowsSkipped",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_rowsSkipped_Incremental",
								"value": {
									"value": "@variables('var_rowsSkipped')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set rowsCopied Incremental",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set rowsCopied",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_rowsCopied_Incremental",
								"value": {
									"value": "@variables('var_rowsCopied')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set execution Details Status",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set rowsCopied Incremental",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set rowsRead Incremental",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set rowsSkipped Incremental",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_executionDetails_Status",
								"value": {
									"value": "@if(\n    not(\n    equals(variables('var_executionDetails_Status_Final'), 'Succeeded'))\n    , variables('var_executionDetails_Status_Final')\n    , activity('Copy API NFT Data to Blob').output.executionDetails[0].status\n    )",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set execution Details Status Final",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set execution Details Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_executionDetails_Status_Final",
								"value": {
									"value": "@variables('var_executionDetails_Status')",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Set Output Return values",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "ForEach API Page",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "pipelineReturnValue",
					"value": [
						{
							"key": "output_rowsCopied",
							"value": {
								"type": "Expression",
								"content": "@variables('var_rowsCopied_Incremental')"
							}
						},
						{
							"key": "output_rowsSkipped",
							"value": {
								"type": "Expression",
								"content": "@variables('var_rowsSkipped_Incremental')"
							}
						},
						{
							"key": "output_rowsRead",
							"value": {
								"type": "Expression",
								"content": "@variables('var_rowsRead_Incremental')"
							}
						},
						{
							"key": "output_executionDetails_Status",
							"value": {
								"type": "Expression",
								"content": "@variables('var_executionDetails_Status_Final')"
							}
						}
					],
					"setSystemVariable": true
				}
			},
			{
				"name": "Set var_modifiedDate",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "var_modifiedDate",
					"value": {
						"value": "@if(or(not(pipeline().parameters.par_blob_folder_exists),empty(pipeline().parameters.par_modifiedDate))\n, replace(replace(variables('var_modifiedDate_InitiValue'), 'T', ' '),'Z', '')\n, replace(replace(pipeline().parameters.par_modifiedDate, 'T', ' '),'Z', '')\n)",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"KeyVaultDNSName": {
				"type": "string",
				"defaultValue": "https://omacckordkv01.vault.azure.net/"
			},
			"par_modifiedDate": {
				"type": "string",
				"defaultValue": "2021-01-01T00:00:00"
			},
			"par_pageSize": {
				"type": "int",
				"defaultValue": 10000
			},
			"par_SourceSystem": {
				"type": "string",
				"defaultValue": "donna"
			},
			"par_batch_id": {
				"type": "int",
				"defaultValue": 1
			},
			"par_batch_ts": {
				"type": "string",
				"defaultValue": "20220101050000"
			},
			"par_datafeed_stage": {
				"type": "array"
			},
			"par_blob_folder_exists": {
				"type": "bool",
				"defaultValue": true
			}
		},
		"variables": {
			"var_nft_page_count": {
				"type": "String"
			},
			"var_nft_page": {
				"type": "Array"
			},
			"var_rowsCopied": {
				"type": "String",
				"defaultValue": "0"
			},
			"var_rowsCopied_Incremental": {
				"type": "String",
				"defaultValue": "0"
			},
			"var_rowsSkipped": {
				"type": "String",
				"defaultValue": "0"
			},
			"var_rowsSkipped_Incremental": {
				"type": "String",
				"defaultValue": "0"
			},
			"var_rowsRead": {
				"type": "String",
				"defaultValue": "0"
			},
			"var_rowsRead_Incremental": {
				"type": "String",
				"defaultValue": "0"
			},
			"var_executionDetails_Status": {
				"type": "String"
			},
			"var_executionDetails_Status_Final": {
				"type": "String",
				"defaultValue": "Succeeded"
			},
			"var_dataset_start_time": {
				"type": "String",
				"defaultValue": "2021-01-01 00:00:00.0000000"
			},
			"var_url_auth_ping": {
				"type": "String",
				"defaultValue": "https://fedengine-dev.non-prod-pen-gcp.omers.com/as/token.oauth2"
			},
			"var_url_donna_gateway": {
				"type": "String",
				"defaultValue": "https://dev-donna-api-gateway-internal.non-prod-pen-gcp.omers.com"
			},
			"var_modifiedDate": {
				"type": "String"
			},
			"var_modifiedDate_InitiValue": {
				"type": "String",
				"defaultValue": "2021-01-01T00:00:00"
			}
		},
		"folder": {
			"name": "Data Extract"
		},
		"annotations": []
	}
}
{
	"name": "pl_02_extract_stages_backup",
	"properties": {
		"activities": [
			{
				"name": "Lookup DataFeedStage",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select * from [cfg].[DataFeedStages]\nwhere DataFeedId = @{pipeline().parameters.par_DataFeedId}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_AzureSQL_Connect",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Get Feed Stages",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Lookup DataFeedStage",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup DataFeedStage').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Check Feed Stage",
							"type": "Switch",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@item().DataStage",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "L0_Blob",
										"activities": [
											{
												"name": "Set L0_Blob",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "var_datafeed_stage_L0_Blob",
													"value": {
														"value": "@array(item())",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"value": "L0_SQL_RAW",
										"activities": [
											{
												"name": "Set L0_SQL_RAW",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "var_datafeed_stage_L0_SQL_RAW",
													"value": {
														"value": "@array(item())",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"value": "L1_SQL_STG",
										"activities": [
											{
												"name": "Set L1_SQL_STG",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "var_datafeed_stage_L1_SQL_STG",
													"value": {
														"value": "@array(item())",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"value": "L2_SQL_EDW",
										"activities": [
											{
												"name": "Set L2_SQL_EDW",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "var_datafeed_stage_L2_SQL_EDW",
													"value": {
														"value": "@array(item())",
														"type": "Expression"
													}
												}
											}
										]
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "If L0_Blob",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Feed Stages",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Check If Feed Blob Folder exists",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(empty(variables('var_datafeed_stage_L0_Blob')))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Copy Source to Blob",
							"type": "Switch",
							"dependsOn": [
								{
									"activity": "Log Feed Stage Execution 01",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@pipeline().parameters.par_SourceSystem",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "BRUCE",
										"activities": [
											{
												"name": "Copy BRUCE to Blob",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Set Source Query_BRUCE",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SalesforceSource",
														"additionalColumns": [
															{
																"name": "source_system",
																"value": {
																	"value": "@pipeline().parameters.par_SourceSystem",
																	"type": "Expression"
																}
															},
															{
																"name": "batch_id",
																"value": {
																	"value": "@pipeline().parameters.par_batch_id",
																	"type": "Expression"
																}
															}
														],
														"query": {
															"value": "@variables('var_source_query')",
															"type": "Expression"
														},
														"readBehavior": "query"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings",
															"maxRowsPerFile": 1000000,
															"fileNamePrefix": {
																"value": "@concat(\ntoLower(variables('var_datafeed_stage_L0_Blob')[0].SourceEntity)\n,'-'\n,pipeline().parameters.par_batch_ts\n)",
																"type": "Expression"
															}
														}
													},
													"enableStaging": false,
													"enableSkipIncompatibleRow": true,
													"validateDataConsistency": true,
													"logSettings": {
														"enableCopyActivityLog": true,
														"copyActivityLogSettings": {
															"logLevel": "Warning",
															"enableReliableLogging": false
														},
														"logLocationSettings": {
															"linkedServiceName": {
																"referenceName": "ls_adls_penbi",
																"type": "LinkedServiceReference"
															},
															"path": "logs"
														}
													},
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_SF_inbound",
														"type": "DatasetReference"
													}
												],
												"outputs": [
													{
														"referenceName": "ds_adls_parquet_target",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('var_datafeed_stage_L0_Blob')[0].DestinationSchema",
																"type": "Expression"
															},
															"folder": {
																"value": "@concat(variables('var_datafeed_stage_L0_Blob')[0].DestinationEntity\n,'/batch_ts='\n,pipeline().parameters.par_batch_ts\n)",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "SP Update Feed Stage Success BRUCE",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy BRUCE to Blob",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[cfg].[UpdateFeedStageExecutionLog]",
													"storedProcedureParameters": {
														"feed_stage_log_id": {
															"value": {
																"value": "@activity('Log Feed Stage Execution 01').output.firstRow.feed_stage_log_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"RowsCopied": {
															"value": {
																"value": "@activity('Copy BRUCE to Blob').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"RowsRead": {
															"value": {
																"value": "@activity('Copy BRUCE to Blob').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"UpdateStatus": {
															"value": "Success",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_korra",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP Update Feed Stage Failure BRUCE",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy BRUCE to Blob",
														"dependencyConditions": [
															"Failed"
														]
													},
													{
														"activity": "Set Source Query_BRUCE",
														"dependencyConditions": [
															"Failed"
														]
													},
													{
														"activity": "SP Update Feed Stage Success BRUCE",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[cfg].[UpdateFeedStageExecutionLog]",
													"storedProcedureParameters": {
														"feed_stage_log_id": {
															"value": {
																"value": "@activity('Log Feed Stage Execution 01').output.firstRow.feed_stage_log_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"RowsCopied": {
															"value": {
																"value": "@activity('Copy BRUCE to Blob').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"RowsRead": {
															"value": {
																"value": "@activity('Copy BRUCE to Blob').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"UpdateStatus": {
															"value": "Failure",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_korra",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Set Source Query_BRUCE",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "var_source_query",
													"value": {
														"value": "select * \nfrom @{variables('var_datafeed_stage_L0_Blob')[0].SourceEntity}\nwhere (@{if(equals(pipeline().parameters.par_DataFeedType, 'incremental'),\nif(or(not(activity('Check If Feed Blob Folder exists').output.exists),empty(pipeline().parameters.par_TimestampValue)), \n'1=1',concat(pipeline().parameters.par_TimestampColumn, '> '''\n,replace(replace(pipeline().parameters.par_TimestampValue,'T',' '),'Z',''),'''')),'1=1')})",
														"type": "Expression"
													}
												}
											}
										]
									}
								],
								"defaultActivities": [
									{
										"name": "Copy MSS PSS to Blob",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Set Source Query",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "1.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "OracleSource",
												"additionalColumns": [
													{
														"name": "source_system",
														"value": {
															"value": "@pipeline().parameters.par_SourceSystem",
															"type": "Expression"
														}
													},
													{
														"name": "batch_id",
														"value": {
															"value": "@pipeline().parameters.par_batch_id",
															"type": "Expression"
														}
													}
												],
												"oracleReaderQuery": {
													"value": "@variables('var_source_query')",
													"type": "Expression"
												},
												"partitionOption": "None",
												"queryTimeout": "02:00:00"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings",
													"maxRowsPerFile": 1000000,
													"fileNamePrefix": {
														"value": "@concat(\ntoLower(variables('var_datafeed_stage_L0_Blob')[0].SourceEntity)\n,'-'\n,pipeline().parameters.par_batch_ts\n)",
														"type": "Expression"
													}
												}
											},
											"enableStaging": false,
											"enableSkipIncompatibleRow": true,
											"validateDataConsistency": true,
											"logSettings": {
												"enableCopyActivityLog": true,
												"copyActivityLogSettings": {
													"logLevel": "Warning",
													"enableReliableLogging": false
												},
												"logLocationSettings": {
													"linkedServiceName": {
														"referenceName": "ls_adls_penbi",
														"type": "LinkedServiceReference"
													},
													"path": "logs"
												}
											},
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "ds_oracle_inbound",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "ds_adls_parquet_target",
												"type": "DatasetReference",
												"parameters": {
													"container": {
														"value": "@variables('var_datafeed_stage_L0_Blob')[0].DestinationSchema",
														"type": "Expression"
													},
													"folder": {
														"value": "@concat(variables('var_datafeed_stage_L0_Blob')[0].DestinationEntity\n,'/batch_ts='\n,pipeline().parameters.par_batch_ts\n)",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "SP Update Feed Stage Success 01 MSS PSS",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Copy MSS PSS to Blob",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[cfg].[UpdateFeedStageExecutionLog]",
											"storedProcedureParameters": {
												"feed_stage_log_id": {
													"value": {
														"value": "@activity('Log Feed Stage Execution 01').output.firstRow.feed_stage_log_id",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"RowsCopied": {
													"value": {
														"value": "@activity('Copy MSS PSS to Blob').output.rowsCopied",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"RowsRead": {
													"value": {
														"value": "@activity('Copy MSS PSS to Blob').output.rowsRead",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"UpdateStatus": {
													"value": "Success",
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "ls_sql_korra",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "SP Update Feed Stage Failure 01 MSS PSS",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Copy MSS PSS to Blob",
												"dependencyConditions": [
													"Failed"
												]
											},
											{
												"activity": "Set Source Query",
												"dependencyConditions": [
													"Failed"
												]
											},
											{
												"activity": "SP Update Feed Stage Success 01 MSS PSS",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[cfg].[UpdateFeedStageExecutionLog]",
											"storedProcedureParameters": {
												"feed_stage_log_id": {
													"value": {
														"value": "@activity('Log Feed Stage Execution 01').output.firstRow.feed_stage_log_id",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"RowsCopied": {
													"value": {
														"value": "@activity('Copy MSS PSS to Blob').output.rowsCopied",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"RowsRead": {
													"value": {
														"value": "@activity('Copy MSS PSS to Blob').output.rowsRead",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"UpdateStatus": {
													"value": "Failure",
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "ls_sql_korra",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Set Source Query",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "var_source_query",
											"value": {
												"value": "select * \nfrom @{variables('var_datafeed_stage_L0_Blob')[0].SourceSchema}.@{variables('var_datafeed_stage_L0_Blob')[0].SourceEntity}\nwhere (@{if(equals(pipeline().parameters.par_DataFeedType, 'incremental'),if(or(not(activity('Check If Feed Blob Folder exists').output.exists),empty(pipeline().parameters.par_TimestampValue)), '1=1',concat(pipeline().parameters.par_TimestampColumn, '> TO_TIMESTAMP('''\n,replace(replace(pipeline().parameters.par_TimestampValue,'T',' '),'Z','')\n,''', ''YYYY-MM-DD HH24:MI:SS.FF'')')),'1=1')})\n--and rownum < 50",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Log Feed Stage Execution 01",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[cfg].[CreateFeedStageExecution]",
									"storedProcedureParameters": {
										"batch_id": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.par_batch_id",
												"type": "Expression"
											}
										},
										"batch_ts": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.par_batch_ts",
												"type": "Expression"
											}
										},
										"DataFeedId": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.par_DataFeedId",
												"type": "Expression"
											}
										},
										"DataStage": {
											"type": "String",
											"value": {
												"value": "@variables('var_datafeed_stage_L0_Blob')[0].DataStage",
												"type": "Expression"
											}
										},
										"PipelineName": {
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										},
										"PipelineRunID": {
											"type": "String",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_AzureSQL_Connect",
									"type": "DatasetReference"
								}
							}
						}
					]
				}
			},
			{
				"name": "If L0_SQL_RAW",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If L0_Blob",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(empty(variables('var_datafeed_stage_L0_SQL_RAW')))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Copy Blob to Raw SQL",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Log Feed Stage Execution 02",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"additionalColumns": [
										{
											"name": "batch_ts",
											"value": {
												"value": "@pipeline().parameters.par_batch_ts",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": false,
										"wildcardFolderPath": {
											"value": "@concat(variables('var_datafeed_stage_L0_SQL_RAW')[0].SourceEntity\n,'/batch_ts='\n,pipeline().parameters.par_batch_ts\n)",
											"type": "Expression"
										},
										"wildcardFileName": "*.parquet",
										"enablePartitionDiscovery": false
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"preCopyScript": {
										"value": "IF OBJECT_ID('@{variables('var_datafeed_stage_L0_SQL_RAW')[0].DestinationSchema}.@{variables('var_datafeed_stage_L0_SQL_RAW')[0].DestinationEntity}') IS NOT NULL truncate table @{variables('var_datafeed_stage_L0_SQL_RAW')[0].DestinationSchema}.@{variables('var_datafeed_stage_L0_SQL_RAW')[0].DestinationEntity};",
										"type": "Expression"
									},
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": true,
									"tableOption": "autoCreate",
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"parallelCopies": 24,
								"enableSkipIncompatibleRow": true,
								"validateDataConsistency": true,
								"logSettings": {
									"enableCopyActivityLog": true,
									"copyActivityLogSettings": {
										"logLevel": "Warning",
										"enableReliableLogging": false
									},
									"logLocationSettings": {
										"linkedServiceName": {
											"referenceName": "ls_adls_penbi",
											"type": "LinkedServiceReference"
										},
										"path": "logs"
									}
								},
								"dataIntegrationUnits": 16,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_adls_parquet_source",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@variables('var_datafeed_stage_L0_SQL_RAW')[0].SourceSchema",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_AzureSql_table",
									"type": "DatasetReference",
									"parameters": {
										"schema": {
											"value": "@variables('var_datafeed_stage_L0_SQL_RAW')[0].DestinationSchema",
											"type": "Expression"
										},
										"table": {
											"value": "@variables('var_datafeed_stage_L0_SQL_RAW')[0].DestinationEntity",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Log Feed Stage Execution 02",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[cfg].[CreateFeedStageExecution]",
									"storedProcedureParameters": {
										"batch_id": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.par_batch_id",
												"type": "Expression"
											}
										},
										"batch_ts": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.par_batch_ts",
												"type": "Expression"
											}
										},
										"DataFeedId": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.par_DataFeedId",
												"type": "Expression"
											}
										},
										"DataStage": {
											"type": "String",
											"value": {
												"value": "@variables('var_datafeed_stage_L0_SQL_RAW')[0].DataStage",
												"type": "Expression"
											}
										},
										"PipelineName": {
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										},
										"PipelineRunID": {
											"type": "String",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_AzureSQL_Connect",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "SP Update Feed Stage Success 02",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy Blob to Raw SQL",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[cfg].[UpdateFeedStageExecutionLog]",
								"storedProcedureParameters": {
									"feed_stage_log_id": {
										"value": {
											"value": "@activity('Log Feed Stage Execution 02').output.firstRow.feed_stage_log_id",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsCopied": {
										"value": {
											"value": "@activity('Copy Blob to Raw SQL').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsRead": {
										"value": {
											"value": "@activity('Copy Blob to Raw SQL').output.rowsRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"UpdateStatus": {
										"value": "Success",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sql_korra",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "SP Update Feed Stage Failure 02",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy Blob to Raw SQL",
									"dependencyConditions": [
										"Failed"
									]
								},
								{
									"activity": "Log Feed Stage Execution 02",
									"dependencyConditions": [
										"Failed"
									]
								},
								{
									"activity": "SP Update Feed Stage Success 02",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[cfg].[UpdateFeedStageExecutionLog]",
								"storedProcedureParameters": {
									"feed_stage_log_id": {
										"value": {
											"value": "@activity('Log Feed Stage Execution 02').output.firstRow.feed_stage_log_id",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsCopied": {
										"value": {
											"value": "@activity('Copy Blob to Raw SQL').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsRead": {
										"value": {
											"value": "@activity('Copy Blob to Raw SQL').output.rowsRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"UpdateStatus": {
										"value": "Failure",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sql_korra",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "If L1_SQL_STG",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If L0_SQL_RAW",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(empty(variables('var_datafeed_stage_L1_SQL_STG')))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Lookup Mapping Columns",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Log Feed Stage Execution 03",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[cfg].[GetColumnMapping]",
									"storedProcedureParameters": {
										"DataFeedStageId": {
											"type": "Int32",
											"value": {
												"value": "@variables('var_datafeed_stage_L1_SQL_STG')[0].DataFeedStageId",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_AzureSQL_Connect",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "Copy Raw SQL to Stage SQL",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Set Raw Stage Query",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Lookup Mapping Columns",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@variables('var_raw_stage_query')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": true,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"parallelCopies": 24,
								"enableSkipIncompatibleRow": true,
								"validateDataConsistency": true,
								"logSettings": {
									"enableCopyActivityLog": true,
									"copyActivityLogSettings": {
										"logLevel": "Warning",
										"enableReliableLogging": false
									},
									"logLocationSettings": {
										"linkedServiceName": {
											"referenceName": "ls_adls_penbi",
											"type": "LinkedServiceReference"
										},
										"path": "logs"
									}
								},
								"dataIntegrationUnits": 16,
								"translator": {
									"value": "@json(activity('Lookup Mapping Columns').output.firstRow.json_output)",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "ds_AzureSQL_Connect",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "ds_AzureSql_table",
									"type": "DatasetReference",
									"parameters": {
										"schema": {
											"value": "@variables('var_datafeed_stage_L1_SQL_STG')[0].DestinationSchema",
											"type": "Expression"
										},
										"table": {
											"value": "@variables('var_datafeed_stage_L1_SQL_STG')[0].DestinationEntity",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Set Raw Stage Query",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "var_raw_stage_query",
								"value": {
									"value": "select * \nfrom @{variables('var_datafeed_stage_L1_SQL_STG')[0].SourceSchema}.@{variables('var_datafeed_stage_L1_SQL_STG')[0].SourceEntity}\nwhere batch_id = @{pipeline().parameters.par_batch_id}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Log Feed Stage Execution 03",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[cfg].[CreateFeedStageExecution]",
									"storedProcedureParameters": {
										"batch_id": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.par_batch_id",
												"type": "Expression"
											}
										},
										"batch_ts": {
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.par_batch_ts",
												"type": "Expression"
											}
										},
										"DataFeedId": {
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.par_DataFeedId",
												"type": "Expression"
											}
										},
										"DataStage": {
											"type": "String",
											"value": {
												"value": "@variables('var_datafeed_stage_L1_SQL_STG')[0].DataStage",
												"type": "Expression"
											}
										},
										"PipelineName": {
											"type": "String",
											"value": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											}
										},
										"PipelineRunID": {
											"type": "String",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_AzureSQL_Connect",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "SP Update Feed Stage Success 03",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy Raw SQL to Stage SQL",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[cfg].[UpdateFeedStageExecutionLog]",
								"storedProcedureParameters": {
									"feed_stage_log_id": {
										"value": {
											"value": "@activity('Log Feed Stage Execution 03').output.firstRow.feed_stage_log_id",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsCopied": {
										"value": {
											"value": "@activity('Copy Raw SQL to Stage SQL').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsRead": {
										"value": {
											"value": "@activity('Copy Raw SQL to Stage SQL').output.rowsRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"UpdateStatus": {
										"value": "Success",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sql_korra",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "SP Update Feed Stage Failure 03",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy Raw SQL to Stage SQL",
									"dependencyConditions": [
										"Failed"
									]
								},
								{
									"activity": "Set Raw Stage Query",
									"dependencyConditions": [
										"Failed"
									]
								},
								{
									"activity": "Lookup Mapping Columns",
									"dependencyConditions": [
										"Failed"
									]
								},
								{
									"activity": "Log Feed Stage Execution 03",
									"dependencyConditions": [
										"Failed"
									]
								},
								{
									"activity": "SP Update Feed Stage Success 03",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[cfg].[UpdateFeedStageExecutionLog]",
								"storedProcedureParameters": {
									"feed_stage_log_id": {
										"value": {
											"value": "@activity('Log Feed Stage Execution 03').output.firstRow.feed_stage_log_id",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsCopied": {
										"value": {
											"value": "@activity('Copy Raw SQL to Stage SQL').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsRead": {
										"value": {
											"value": "@activity('Copy Raw SQL to Stage SQL').output.rowsRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"UpdateStatus": {
										"value": "Failure",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sql_korra",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Update Timestamp if Incremental",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If L1_SQL_STG",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.par_DataFeedType, 'incremental')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Update Table Timestamp",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[cfg].[UpdateTableTimeStamp]",
								"storedProcedureParameters": {
									"DataFeedId": {
										"value": {
											"value": "@pipeline().parameters.par_DataFeedId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"TargetTable": {
										"value": {
											"value": "@concat(\n  variables('var_datafeed_stage_L1_SQL_STG')[0].DestinationSchema\n, '.'\n, variables('var_datafeed_stage_L1_SQL_STG')[0].DestinationEntity\n)",
											"type": "Expression"
										},
										"type": "String"
									},
									"TimestampColumn": {
										"value": {
											"value": "@pipeline().parameters.par_TimestampColumn",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sql_korra",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "If L2_SQL_EDW",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Update Timestamp if Incremental",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(empty(variables('var_datafeed_stage_L2_SQL_EDW')))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Execute Load to EDW",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pl_03_load_edw_table",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"par_batch_id": {
										"value": "@pipeline().parameters.par_batch_id",
										"type": "Expression"
									},
									"par_usp_name": {
										"value": "@variables('var_datafeed_stage_L2_SQL_EDW')[0].PipelineParameteres",
										"type": "Expression"
									},
									"par_batch_ts": {
										"value": "@pipeline().parameters.par_batch_ts",
										"type": "Expression"
									},
									"par_DataFeedId": {
										"value": "@pipeline().parameters.par_DataFeedId",
										"type": "Expression"
									},
									"par_DataStage": {
										"value": "@variables('var_datafeed_stage_L2_SQL_EDW')[0].DataStage",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Check If Feed Blob Folder exists",
				"type": "Validation",
				"dependsOn": [
					{
						"activity": "Lookup DataFeedStage",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_adls_parquet_target",
						"type": "DatasetReference",
						"parameters": {
							"container": {
								"value": "@activity('Lookup DataFeedStage').output.value[0].DestinationSchema",
								"type": "Expression"
							},
							"folder": {
								"value": "@activity('Lookup DataFeedStage').output.value[0].DestinationEntity",
								"type": "Expression"
							}
						}
					},
					"timeout": "0.00:00:05",
					"sleep": 5
				}
			}
		],
		"parameters": {
			"par_DataFeedId": {
				"type": "int",
				"defaultValue": 4
			},
			"par_batch_ts": {
				"type": "string",
				"defaultValue": "20220126115635"
			},
			"par_batch_id": {
				"type": "int",
				"defaultValue": 1
			},
			"par_DataFeedType": {
				"type": "string",
				"defaultValue": "incremental"
			},
			"par_SourceSystem": {
				"type": "string",
				"defaultValue": "MSS"
			},
			"par_TimestampColumn": {
				"type": "string",
				"defaultValue": "TIMESTAMP"
			},
			"par_TimestampValue": {
				"type": "string"
			}
		},
		"variables": {
			"var_source_query": {
				"type": "String"
			},
			"var_raw_stage_query": {
				"type": "String"
			},
			"var_datafeed_stage_L0_Blob": {
				"type": "Array"
			},
			"var_datafeed_stage_L0_SQL_RAW": {
				"type": "Array"
			},
			"var_datafeed_stage_L1_SQL_STG": {
				"type": "Array"
			},
			"var_datafeed_stage_L2_SQL_EDW": {
				"type": "Array"
			},
			"var_feed_blob_folder_exists": {
				"type": "Boolean"
			}
		},
		"folder": {
			"name": "Not Used"
		},
		"annotations": []
	}
}